
Object
=========

JavaScript object is a non-primitive data-type that allows you to store multiple collections of data.
Each member of an object is a key: value pair separated by commas and enclosed in curly braces {}.

possible ways to create objects in JavaScript:

There are different ways to create new objects:

Create a single object, using an object literal.
Create a single object, with the keyword new.
Define an object constructor, and then create objects of the constructed type.
Create an object using Object.create().
 
Object constructor:
--------------------
The simplest way to create an empty object is using the Object constructor. Currently this approach is not recommended.
var object = new Object();

Object's create method:
-------------------------
The create method of Object creates a new object by passing the prototype object as a parameter
var object = Object.create(null);

Object literal syntax:
-------------------------
The object literal syntax (or object initializer),is a comma-separated set of name-value pairs wrapped in curly braces.
var object = {
     name: "Sudheer",
     age: 34
};
Object literal property values can be of any data type, including array, function, and nested object.

Function constructor:
--------------------------
Create any function and apply the new operator to create object instances,
function Person(name) {
  this.name = name;
  this.age = 21;
}
var object = new Person("Sudheer");

Function constructor with prototype:
----------------------------------------------
This is similar to function constructor but it uses prototype for their properties and methods,
function Person() {}
Person.prototype.name = "Sudheer";
var object = new Person();

ES6 Class syntax:
-----------------
ES6 introduces class feature to create the objects
class Person {
  constructor(name) {
    this.name = name;
  }
}
var object = new Person("Sudheer");

Singleton pattern:
-----------------
A Singleton is an object which can only be instantiated one time. Repeated calls to its constructor return the same instance and this way 
one can ensure that they don't accidentally create multiple instances.
var object = new (function () {
  this.name = "Sudheer";
})();

In JavaScript, almost "everything" is an object.
All JavaScript values, except primitives, are objects.
JavaScript objects inherit the properties of their prototype.
Objects are mutable: They are addressed by reference, not by value.
If person is an object, the following statement will not create a copy of person:

const x = person;  // Will not create a copy of person.

The object x is not a copy of person. It is person. Both x and person are the same object.
Any changes to x will also change person, because x and person are the same object.

const person = {
  firstName:"John",
  lastName:"Doe",
  age:50, eyeColor:"blue"
}

const x = person;
x.age = 10;      // Will change both x.age and person.age


The syntax for accessing the property of an object is:
======================================================
objectName.property      // person.age

objectName["property"]   // person["age"]

objectName[expression]   // x = "age"; person[x]

Adding New Properties
-----------------------
person.nationality = "English";

Deleting Properties
-------------------
The delete keyword deletes a property from an object:

const person = {
  firstName: "John",
  lastName: "Doe",
  age: 50,
  eyeColor: "blue"
};

delete person.age;

or delete person["age"];

The delete keyword deletes both the value of the property and the property itself.
After deletion, the property cannot be used before it is added back again.
The delete operator is designed to be used on object properties. It has no effect on variables or functions.
The delete operator should not be used on predefined JavaScript object properties. It can crash your application.
The delete keyword does not delete inherited properties, but if you delete a prototype property, it will affect all objects inherited from the prototype

Nested Objects
===============
Values in an object can be another object:

myObj = {
  name:"John",
  age:30,
  cars: {
    car1:"Ford",
    car2:"BMW",
    car3:"Fiat"
  }
}

const myObj = {
  name: "John",
  age: 30,
  cars: [
    {name:"Ford", models:["Fiesta", "Focus", "Mustang"]},
    {name:"BMW", models:["320", "X3", "X5"]},
    {name:"Fiat", models:["500", "Panda"]}
  ]
}

Some common solutions to display JavaScript objects are:
-------------------------------
Displaying the Object Properties by name
Displaying the Object Properties in a Loop
Displaying the Object using Object.values()
Any JavaScript object can be converted to an array using Object.values():
Displaying the Object using JSON.stringify()


Static methods
=============
Object.assign()
------------------
Copies the values of all enumerable own properties from one or more source objects to a target object.
const target = { a: 1, b: 2 };
const source = { b: 4, c: 5 };

const returnedTarget = Object.assign(target, source);

console.log(target);
// expected output: Object { a: 1, b: 4, c: 5 }

Object.create()
--------------
Creates a new object with the specified prototype object and properties.
const person = {
  isHuman: false,
  printIntroduction: function() {
    console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);
  }
};

const me = Object.create(person);

me.name = 'Matthew'; // "name" is a property set on "me", but not on "person"
me.isHuman = true; // inherited properties can be overwritten

me.printIntroduction();
// expected output: "My name is Matthew. Am I human? true"

Object.defineProperty()
------------------------
Adds the named property described by a given descriptor to an object.

const object1 = {};

Object.defineProperty(object1, 'property1', {
  value: 42,
  writable: false
});
object1.property1 = 77;
// throws an error in strict mode
console.log(object1.property1);
// expected output: 42


Object.defineProperties()
-------------------------
Adds the named properties described by the given descriptors to an object.
const object1 = {};

Object.defineProperties(object1, {
  property1: {
    value: 42,
    writable: true
  },
  property2: {}
});

console.log(object1.property1);
// expected output: 42


Object.entries()
---------------
Returns an array containing all of the [key, value] pairs of a given object's own enumerable string properties.
const object1 = {
  a: 'somestring',
  b: 42
};

for (const [key, value] of Object.entries(object1)) {
  console.log(`${key}: ${value}`);
}

// expected output:
// "a: somestring"
// "b: 42"

Object.freeze()
---------------
Freezes an object. Other code cannot delete or change its properties.
const obj = {
  prop: 42
};

Object.freeze(obj);

obj.prop = 33;
// Throws an error in strict mode

console.log(obj.prop);
// expected output: 42

Object.fromEntries()
--------------------
Returns a new object from an iterable of [key, value] pairs. (This is the reverse of Object.entries).

const entries = new Map([
  ['foo', 'bar'],
  ['baz', 42]
]);

const obj = Object.fromEntries(entries);

console.log(obj);

Object.getOwnPropertyDescriptor()
---------------------------------
Returns a property descriptor for a named property on an object.
const object1 = {
  property1: 42
};

const descriptor1 = Object.getOwnPropertyDescriptor(object1, 'property1');

console.log(descriptor1.configurable);
// expected output: true

console.log(descriptor1.value);
// expected output: 42

Object.getOwnPropertyDescriptors()
-----------------------------------
Returns an object containing all own property descriptors for an object.
const object1 = {
  property1: 42
};

const descriptors1 = Object.getOwnPropertyDescriptors(object1);

console.log(descriptors1.property1.writable);
// expected output: true

console.log(descriptors1.property1.value);
// expected output: 42


Object.getOwnPropertyNames()
---------------------------
Returns an array containing the names of all of the given object's own enumerable and non-enumerable properties.
const object1 = {
  a: 1,
  b: 2,
  c: 3
};

console.log(Object.getOwnPropertyNames(object1));
// expected output: Array ["a", "b", "c"]

Object.getOwnPropertySymbols()
-----------------------------
Returns an array of all symbol properties found directly upon a given object.
const object1 = {};
const a = Symbol('a');
const b = Symbol.for('b');

object1[a] = 'localSymbol';
object1[b] = 'globalSymbol';

const objectSymbols = Object.getOwnPropertySymbols(object1);

console.log(objectSymbols.length);
// expected output: 2

Object.getPrototypeOf()
----------------------------
Returns the prototype (internal [[Prototype]] property) of the specified object.
const prototype1 = {};
const object1 = Object.create(prototype1);

console.log(Object.getPrototypeOf(object1) === prototype1);
// expected output: true


Object.is()
--------------
Compares if two values are the same value. Equates all NaN values (which differs from both IsLooselyEqual used by == and IsStrictlyEqual used by ===).
// Case 1: Evaluation result is the same as using ===
Object.is(25, 25); // true
Object.is("foo", "foo"); // true
Object.is("foo", "bar"); // false
Object.is(null, null); // true
Object.is(undefined, undefined); // true
Object.is(window, window); // true
Object.is([], []); // false
const foo = { a: 1 };
const bar = { a: 1 };
const sameFoo = foo;
Object.is(foo, foo); // true
Object.is(foo, bar); // false
Object.is(foo, sameFoo); // true

// Case 2: Signed zero
Object.is(0, -0); // false
Object.is(+0, -0); // false
Object.is(-0, -0); // true

// Case 3: NaN
Object.is(NaN, 0 / 0); // true
Object.is(NaN, Number.NaN); // true

Object.isExtensible()
-------------------
Determines if extending of an object is allowed.
const object1 = {};

console.log(Object.isExtensible(object1));
// expected output: true

Object.preventExtensions(object1);

console.log(Object.isExtensible(object1));
// expected output: false


Object.isFrozen()
--------------------
Determines if an object was frozen.
const object1 = {
  property1: 42
};

console.log(Object.isFrozen(object1));
// expected output: false

Object.freeze(object1);

console.log(Object.isFrozen(object1));
// expected output: true

Object.isSealed()
-----------------------
Determines if an object is sealed.
const object1 = {
  property1: 42
};

console.log(Object.isSealed(object1));
// expected output: false

Object.seal(object1);

console.log(Object.isSealed(object1));
// expected output: true

Object.keys()
-------------------
Returns an array containing the names of all of the given object's own enumerable string properties.
const object1 = {
  a: 'somestring',
  b: 42,
  c: false
};

console.log(Object.keys(object1));
// expected output: Array ["a", "b", "c"]

Object.preventExtensions()
---------------------------------
Prevents any extensions of an object.
const object1 = {};

Object.preventExtensions(object1);

try {
  Object.defineProperty(object1, 'property1', {
    value: 42
  });
} catch (e) {
  console.log(e);
  // expected output: TypeError: Cannot define property property1, object is not extensible
}


Object.seal()
-----------------
Prevents other code from deleting properties of an object.

const object1 = {
  property1: 42
};

Object.seal(object1);
object1.property1 = 33;
console.log(object1.property1);
// expected output: 33

delete object1.property1; // cannot delete when sealed
console.log(object1.property1);
// expected output: 33


Object.setPrototypeOf()
--------------------
Sets the object's prototype (its internal [[Prototype]] property).

Object.values()
----------------
Returns an array containing the values that correspond to all of a given object's own enumerable string properties.
const object1 = {
  a: 'somestring',
  b: 42,
  c: false
};

console.log(Object.values(object1));
// expected output: Array ["somestring", 42, false]
